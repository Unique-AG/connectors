generator client {
  provider = "prisma-client-js"
  output   = "../@generated/prisma"
  previewFeatures = ["queryCompiler", "driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TokenType {
  ACCESS
  REFRESH
}

/// @idPrefix(oauth_client)
model OAuthClient {
  id                      String   @id @default(cuid())
  clientId                String   @unique
  clientSecret            String?
  clientName              String
  clientDescription       String?
  logoUri                 String?
  clientUri               String?
  developerName           String?
  developerEmail          String?
  redirectUris            String[]
  grantTypes              String[]
  responseTypes           String[]
  tokenEndpointAuthMethod String
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

/// @idPrefix(auth_code)
model AuthorizationCode {
  id                  String      @id @default(cuid())
  code                String      @unique
  userId              String
  clientId            String
  redirectUri         String
  codeChallenge       String
  codeChallengeMethod String
  resource            String?
  scope               String?
  expiresAt           DateTime
  usedAt              DateTime?
  githubAccessToken   String?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  userProfileId       String
  userProfile         UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
}

/// @idPrefix(oauth_session)
model OAuthSession {
  id                  String   @id @default(cuid())
  sessionId           String   @unique
  state               String
  clientId            String?
  redirectUri         String?
  codeChallenge       String?
  codeChallengeMethod String?
  oauthState          String?
  scope               String?
  resource            String?
  expiresAt           DateTime
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

/// @idPrefix(user_profile)
model UserProfile {
  id             String   @id @default(cuid())
  provider       String
  providerUserId String
  username       String
  email          String?
  displayName    String?
  avatarUrl      String?
  raw            Json?
  accessToken    String?
  refreshToken   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  authorizationCodes AuthorizationCode[]
  tokens             Token[]

  @@unique([provider, providerUserId])
}

/// @idPrefix(token)
model Token {
  id         String    @id @default(cuid())
  token      String    @unique
  type       TokenType
  expiresAt  DateTime
  userId     String
  clientId   String
  scope      String
  resource   String
  familyId   String?
  generation Int?
  usedAt     DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  userProfileId String
  userProfile   UserProfile? @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  @@index([familyId])
  @@index([expiresAt])
  @@index([userProfileId])
}
